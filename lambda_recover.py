s1 = 812232471417426181805032689367685862777288402951685902167738734803916641191740845431062024850333836425225609232763862858790532743976496298785481372204005954989228666355216700722450132411078685542833675775414393794419489500156108904
s2 = 775374819640924392463352370266016872792555498877526815777123986756167163852869524788542115052179728786586090055155815908774779867446963438303786010340111856972908668754430180852987368116805533052072088975847236845486323549814684106
sigma1 = 83814198383102558219731078260892729932246618004265700685467928187377105751529
sigma2 = 80010860488299999175959591355409115829153374134148110605875958426284632092221

diff_s = s1 - s2
diff_sigma = sigma1 - sigma2

q, r = divmod(diff_s, diff_sigma)
print("floor quotient q =", q)
print("Trying small offsets around q...")

# search small neighborhood for lambda that gives valid alpha1,alpha2 in [1,2**256)
for t in range(-10, 11):
    lam = q + t
    a1 = s1 - sigma1 * lam
    a2 = s2 - sigma2 * lam
    if 1 <= a1 < 2**256 and 1 <= a2 < 2**256:
        print("Found candidate: t =", t)
        print("lambda (decimal) =", lam)
        print("lambda (hex)     =", hex(lam))
        print("alpha1 =", a1)
        print("alpha2 =", a2)
        break
else:
    print("Tidak ditemukan kandidat dalam range searched.")
